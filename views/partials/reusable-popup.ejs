<link rel="stylesheet" href="/css/copy-btn.css" />
<!-- Popup Container -->
<div id="popup" class="fixed inset-0 z-50 hidden">
  <!-- Backdrop -->
  <div class="Backdrop absolute inset-0 bg-black/50"></div>

  <!-- Popup Card -->
  <div
    class="absolute left-1/2 top-1/2 w-[380px] -translate-x-1/2 -translate-y-1/2 rounded-lg border border-gray-200 bg-white p-5 shadow-lg dark:border-gray-700 dark:bg-gray-900">
    <!-- Icon -->
    <div class="popup-icon mb-4 flex justify-center">
      <!-- Icons will be injected here by JS -->
    </div>

    <!-- Content -->
    <div class="text-center">
      <h4 class="popup-title mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100"></h4>
      <div class="popup-description text-sm text-gray-600 dark:text-gray-300"></div>
    </div>

    <!-- Buttons -->
    <div class="popup-actions mt-6 flex justify-center gap-3">
      <!-- Buttons will be injected here by JS -->
    </div>

    <!-- Close Button -->
    <button
      class="popup-close absolute right-2 top-2 rounded-sm p-1 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-4"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2">
        <path d="M18 6L6 18M6 6l12 12" />
      </svg>
    </button>
  </div>
</div>
<script>
  class Popup {
    constructor() {
      this.popup = document.getElementById("popup");
      this.backdrop = this.popup.querySelector(".Backdrop");
      this.closeBtn = this.popup.querySelector(".popup-close");
      this.title = this.popup.querySelector(".popup-title");
      this.description = this.popup.querySelector(".popup-description");
      this.iconContainer = this.popup.querySelector(".popup-icon");
      this.actionsContainer = this.popup.querySelector(".popup-actions");

      this.setupEventListeners();
    }

    setupEventListeners() {
      this.backdrop.addEventListener("click", () => this.close());
      this.closeBtn.addEventListener("click", () => this.close());
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") this.close();
      });
    }

    getIcon(type) {
      const icons = {
        success: `
        <div class="rounded-full bg-green-100 p-3 dark:bg-green-900">
          <svg class="h-6 w-6 text-green-600 dark:text-green-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
          </svg>
        </div>
      `,
        error: `
        <div class="rounded-full bg-red-100 p-3 dark:bg-red-900">
          <svg class="h-6 w-6 text-red-600 dark:text-red-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </div>
      `,
        warning: `
        <div class="rounded-full bg-yellow-100 p-3 dark:bg-yellow-900">
          <svg class="h-6 w-6 text-yellow-600 dark:text-yellow-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        </div>
      `,
        info: `
        <div class="rounded-full bg-blue-100 p-3 dark:bg-blue-900">
          <svg class="h-6 w-6 text-blue-600 dark:text-blue-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
      `,
      };
      return icons[type] || "";
    }

    showKeyValueData(data) {
      const formattedData = this.formatKeyValueData(data);

      this.show({
        type: "info",
        title: "Data",
        description: `
        <div class="mt-4 max-h-[60vh] overflow-auto rounded bg-gray-100 p-4 text-left text-sm break-words dark:bg-gray-800">
          ${formattedData}
        </div>
      `,
        actions: [
          {
            text: "Close",
            variant: "primary",
            onClick: "popup.close()",
          },
        ],
      });
    }

    formatKeyValueData(data) {
      return Object.entries(data)
        .map(([key, value]) => {
          const formattedValue =
            key === "phoneNumber"
              ? `<a href="https://wa.me/${this.escapeHtml(
                  value
                )}" target="_blank" class="text-blue-600 dark:text-blue-400">${this.escapeHtml(value)}</a>`
              : this.escapeHtml(value);
          return `
                    <div class="mb-2 flex">
                        <span class="w-1/3 font-semibold text-gray-700 dark:text-gray-300">${this.escapeHtml(
                          key
                        )}:</span>
                        <span class="w-2/3 text-gray-800 dark:text-gray-200 flex justify-between">${formattedValue} <%-include("./copy-btn")%></span>
                    </div>
                `;
        })
        .join("");
    }

    escapeHtml(unsafe) {
      return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    show({ type = "info", title = "", description = "", actions = [] }) {
      this.title.textContent = title;
      this.description.innerHTML = description;
      this.iconContainer.innerHTML = this.getIcon(type);

      this.actionsContainer.innerHTML = "";
      actions.forEach((action) => {
        const button = document.createElement("button");
        button.className = this.getButtonClasses(action.variant);
        button.textContent = action.text;
        if (action.onClick) {
          if (typeof action.onClick === "function") {
            button.addEventListener("click", action.onClick);
          } else if (typeof action.onClick === "string") {
            button.setAttribute("onclick", action.onClick);
          }
        }
        this.actionsContainer.appendChild(button);
      });

      this.popup.classList.remove("hidden");
      this.popup.classList.add("animate-fade-in");
    }

    close() {
      this.popup.classList.add("hidden");
    }

    getButtonClasses(variant) {
      const baseClasses = "px-4 py-2 rounded-lg text-sm font-medium transition-colors";
      const variants = {
        primary: "bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",
        secondary:
          "bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600",
        danger: "bg-red-600 text-white hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600",
      };
      return `${baseClasses} ${variants[variant] || variants.secondary}`;
    }
    /**
     * Displays a form with input and select elements
     * @param {string} title - Title of the popup
     * @param {Array} fields - Array of objects for form fields
     * @param {Array} actions - Array of action buttons with onClick handlers
     */
    showForm({ title = "", fields = [], actions = [] }) {
      this.title.textContent = title;
      this.description.innerHTML = ""; // Clear description

      const form = document.createElement("form");
      form.className = "space-y-4";

      // Generate form fields
      fields.forEach((field) => {
        const fieldContainer = document.createElement("div");
        fieldContainer.className = "text-left";

        const label = document.createElement("label");
        label.textContent = field.label;
        label.className = "block mb-1 text-gray-700 dark:text-gray-300 font-semibold";

        let inputElement;
        if (field.type === "text") {
          inputElement = document.createElement("input");
          inputElement.type = "text";
          inputElement.placeholder = field.placeholder || "";
          inputElement.name = field.name || ""; // Ensure the field has a name
          inputElement.className =
            "w-full rounded-lg border border-gray-300 p-2 text-gray-800 dark:bg-gray-800 dark:text-gray-200";
        } else if (field.type === "select") {
          inputElement = document.createElement("select");
          inputElement.name = field.name || ""; // Ensure the field has a name
          inputElement.className =
            "w-full rounded-lg border border-gray-300 p-2 text-gray-800 dark:bg-gray-800 dark:text-gray-200";
          field.options.forEach((option) => {
            const optionElement = document.createElement("option");
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            inputElement.appendChild(optionElement);
          });
        }

        fieldContainer.appendChild(label);
        fieldContainer.appendChild(inputElement);
        form.appendChild(fieldContainer);
      });

      this.description.appendChild(form);

      // Generate action buttons
      this.actionsContainer.innerHTML = "";
      actions.forEach((action) => {
        const button = document.createElement("button");
        button.className = this.getButtonClasses(action.variant);
        button.textContent = action.text;
        button.type = "button"; // Use button to avoid form submission

        button.addEventListener("click", () => {
          if (action.onClick) {
            const formData = this.getFormData(form);
            action.onClick(formData); // Pass form data to the action handler
          }
        });

        this.actionsContainer.appendChild(button);
      });

      this.popup.classList.remove("hidden");
      this.popup.classList.add("animate-fade-in");
    }

    /**
     * Extracts form data into an object
     * @param {HTMLFormElement} form - Form element
     * @returns {Object} - Form data as key-value pairs
     */
    getFormData(form) {
      const formData = new FormData(form);
      return Object.fromEntries(formData.entries());
    }
  }
  window.popup = new Popup();
</script>
