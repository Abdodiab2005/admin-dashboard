<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Product</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/css/build.min.css" />
  </head>
  <body class="bg-gray-100">
    <%- include("../partials/navbar") %> <%- include("../partials/alerts-popups") %>
    <main class="container mx-auto px-4 py-8 max-w-4xl">
      <div class="bg-white rounded-lg shadow-lg p-6 mt-16">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Add New Product</h1>

        <form id="productForm" class="space-y-6">
          <!-- Image Upload -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Product Image</label>
            <div class="flex items-center gap-4">
              <img
                src="/placeholder.svg"
                alt="Product Preview"
                class="w-32 h-32 object-contain border rounded-lg"
                id="imagePreview" />
              <input type="file" id="imageInput" name="image" class="hidden" accept="image/*" />
              <button
                type="button"
                onclick="document.getElementById('imageInput').click()"
                class="bg-blue-100 text-blue-600 px-4 py-2 rounded-lg hover:bg-blue-200">
                Upload Image
              </button>
            </div>
          </div>

          <!-- Basic Info Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
              <input type="text" name="name" class="w-full p-2 border rounded-lg" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Price</label>
              <input type="number" name="price" class="w-full p-2 border rounded-lg" step="0.01" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Stock</label>
              <input type="number" name="stock" class="w-full p-2 border rounded-lg" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Featured</label>
              <select name="isFeatured" class="w-full p-2 border rounded-lg">
                <option value="false">No</option>
                <option value="true">Yes</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
              <select name="categoryId" id="categorySelect" class="w-full p-2 border rounded-lg">
                <option value="">Select a category</option>
                <% categories.forEach(function(category) { %>
                <option value="<%= category.id %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Subcategory</label>
              <select name="subcategoryId" id="subcategorySelect" class="w-full p-2 border rounded-lg" disabled>
                <option value="">Select a subcategory</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Label</label>
              <input type="text" name="labelProduct" id="labelProduct" class="w-full p-2 border rounded-lg" />
            </div>
          </div>

          <!-- Description -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea name="description" class="w-full p-2 border rounded-lg h-32"></textarea>
          </div>

          <!-- Product Details -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium text-gray-700">Product Details</h3>
              <button
                type="button"
                onclick="addDetailField()"
                class="bg-green-100 text-green-600 px-3 py-1 rounded-lg hover:bg-green-200">
                + Add Detail
              </button>
            </div>
            <div id="detailsContainer" class="space-y-3">
              <!-- Detail fields will be added here dynamically -->
            </div>
          </div>

          <!-- Form Actions -->
          <div class="flex gap-3 justify-end">
            <button
              type="button"
              onclick="window.history.back()"
              class="bg-gray-100 text-gray-600 px-4 py-2 rounded-lg hover:bg-gray-200">
              Cancel
            </button>
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
              Add Product
            </button>
          </div>
        </form>
      </div>
    </main>

    <script>
      // Image upload preview
      document.getElementById("imageInput").addEventListener("change", function (e) {
        const reader = new FileReader();
        reader.onload = function (event) {
          document.getElementById("imagePreview").src = event.target.result;
        };
        reader.readAsDataURL(e.target.files[0]);
      });

      // Add new detail field
      function addDetailField() {
        const container = document.getElementById("detailsContainer");
        const div = document.createElement("div");
        div.className = "flex gap-3 items-center";
        div.innerHTML = `
          <input type="text" name="detailKey[]"
                 placeholder="Key" class="p-2 border rounded-lg flex-1">
          <input type="text" name="detailValue[]"
                 placeholder="Value" class="p-2 border rounded-lg flex-1">
          <button type="button" onclick="this.parentElement.remove()"
                  class="text-red-500 hover:text-red-700">
              âœ•
          </button>
        `;
        container.appendChild(div);
      }

      // Category and Subcategory handling
      const categorySelect = document.getElementById('categorySelect');
      const subcategorySelect = document.getElementById('subcategorySelect');
      const categories = <%- JSON.stringify(categories) %>;

      categorySelect.addEventListener('change', function() {
        const selectedCategoryId = this.value;
        subcategorySelect.innerHTML = '<option value="">Select a subcategory</option>';

        if (selectedCategoryId) {
          const selectedCategory = categories.find(cat => cat.id === selectedCategoryId);
          if (selectedCategory && selectedCategory.subcategories) {
            selectedCategory.subcategories.forEach(subcat => {
              const option = document.createElement('option');
              option.value = subcat.id;
              option.textContent = subcat.name;
              subcategorySelect.appendChild(option);
            });
            subcategorySelect.disabled = false;
          } else {
            subcategorySelect.disabled = true;
          }
        } else {
          subcategorySelect.disabled = true;
        }
      });

      // Form submission
      document.getElementById("productForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        const submitBtn = e.target.querySelector('button[type="submit"]');
        submitBtn.disabled = true;

        try {
          const formData = new FormData(e.target);
          const details = [];

          // Collect details
          const detailKeys = formData.getAll("detailKey[]");
          const detailValues = formData.getAll("detailValue[]");
          for (let i = 0; i < detailKeys.length; i++) {
            if (detailKeys[i] && detailValues[i]) {
              details.push({ [detailKeys[i]]: detailValues[i] });
            }
          }

          formData.delete("detailKey[]");
          formData.delete("detailValue[]");
          formData.append("details", JSON.stringify(details));

          // Add category name to formData
          const categoryId = formData.get('categoryId');
          const selectedCategory = categories.find(cat => cat.id === categoryId);
          if (selectedCategory) {
            formData.append('categoryName', selectedCategory.name);
          }

          const labelProduct = document.getElementById('labelProduct').value;
          formData.append('label', labelProduct);

          // Add subcategory name to formData if selected
          const subcategoryId = formData.get('subcategoryId');
          if (subcategoryId) {
            const selectedCategory = categories.find(cat => cat.id === categoryId);
            const selectedSubcategory = selectedCategory.subcategories.find(subcat => subcat.id === subcategoryId);
            if (selectedSubcategory) {
              formData.append('subcategoryName', selectedSubcategory.name);
            }
          }

          const response = await fetch("/admin/product/add", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error("Network response was not ok");
          }

          const data = await response.json();
          if (data.success) {
            successAlert("Product added successfully!");
            const uid = await fetch("/admin/get-uid", {
              method: "GET",
            }).then((res) => res.json());
            console.log(uid);
            await fetch("https://store.mohammed-zuhair.online/update-products", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ uid }),
            });
            window.location.href = `/admin/view-product/${data.productId}`;
          } else {
            errorAlert(data.message || "An error occurred while adding the product.");
          }
        } catch (error) {
          console.error("Error adding product:", error);
          errorAlert("An error occurred while adding the product. Please try again.");
        } finally {
          submitBtn.disabled = false;
        }
      });
    </script>
  </body>
</html>
